package com.acc.regression.users;

import java.net.URLEncoder;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ThreadLocalRandom;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import org.json.simple.JSONArray;
import org.json.simple.JSONObject;

import com.acc.regression.GetJWT;
import com.acc.regression.GetUser;
import com.acc.regression.InitializeTest;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.jayway.restassured.RestAssured;
import com.jayway.restassured.response.Response;
import com.jayway.restassured.specification.RequestSpecification;

import cucumber.api.java.en.Given;
import cucumber.api.java.en.Then;
import cucumber.api.java.en.When;
import org.junit.Assert;
import static com.jayway.restassured.RestAssured.given;
import static io.restassured.path.json.JsonPath.from;

@SuppressWarnings("unchecked")
public class UserIRD extends InitializeTest {
	String endpoint = null;
	String userId = null;
	String ird = null;
	String token = null;

	Response putIRDResponse;
	Response getProfileInformationResponse;

	@Given("^Anna want to update her IRD number with \"([^\"]*)\"$")
	public void anna_want_to_update_her_IRD_number_with(String Description) throws Throwable {

	}

	@When("^Anna update IRD number \"([^\"]*)\" using \"([^\"]*)\"myACC portal$")
	public void anna_update_IRD_number_using_myACC_portal(String ird, String userId) throws Throwable {

		if (!userId.trim().equals("")) {
			this.userId = userId;
		} else {
			GetUser user = new GetUser();
			user.selectRandomUser();
			this.userId = accUser;

		}

		GetJWT JWT = new GetJWT();
		token = JWT.getToken(this.userId);

		this.ird = ird;

		this.endpoint = "api/v1/users/" + this.userId + "/ird/" + ird;

		putIRDResponse = given().
								header("X-Authorization", token).
								relaxedHTTPSValidation().
								urlEncodingEnabled(false).
								contentType("application/json").
						when().
								put(this.endpoint);

		// System.out.println(putAccountInformationResponse.jsonPath().prettyPrint());
		if (putIRDResponse.statusCode() != 200) {
			System.out.println("Unable to update the credential information Status Code--->"
					+ putIRDResponse.statusCode());

		}
	}

	@Then("^Anna should see the request returning '(\\d+)' with \"([^\"]*)\" for IRD$")
	public void anna_should_see_the_request_returning_with_for_IRD(int expectedstatuscode, String expectedStatusMessage) throws Throwable {
		if(putIRDResponse.statusCode() != 200){
			System.out.println("Returned Status code for the request - " + putIRDResponse.statusCode());
//			System.out.println(putIRDResponse.jsonPath().prettyPrint());
//			System.out.println(
//					"Put Account status message - " + postVerifyRegistrationResponse.body().jsonPath().get("message"));

			Assert.assertEquals(expectedStatusMessage,putIRDResponse.body().jsonPath().get("message"));
		}
		
		Assert.assertTrue("UserIRD Service is NOT Running fine",
				expectedstatuscode == putIRDResponse.statusCode());

	}
	

	@Then("^Anna IRD number is updated$")
	public void anna_IRD_number_is_updated() throws Throwable {
		// Write code here that turns the phrase above into concrete actions
		this.endpoint = "api/v1/users/" + this.userId + "/profile";

		getProfileInformationResponse = given().
											header("X-Authorization", token).
											relaxedHTTPSValidation().
											urlEncodingEnabled(false).
											contentType("application/json").
										when().
											get(this.endpoint);
		
		if(putIRDResponse.statusCode() == 200){
			Assert.assertEquals(this.ird, getProfileInformationResponse.jsonPath().get("weeklyComp.irdNumber"));
		}
		

}

}